#!/usr/bin/env python3
"""
End-to-End Newsroom Workflow Test

Tests the complete workflow:
Client ‚Üí News Chief ‚Üí Reporter ‚Üí (Mock Editor)

This demonstrates A2A agent-to-agent communication.
"""

import asyncio
import json
import httpx
from a2a.client import ClientFactory, ClientConfig, A2ACardResolver, create_text_message_object

async def test_newsroom_workflow():
    """Test the complete newsroom workflow with agent-to-agent communication"""

    print("üè¢ Elastic News - Newsroom Workflow Test")
    print("="*60)
    print("Testing: Client ‚Üí News Chief ‚Üí Reporter ‚Üí Mock Editor")
    print("="*60)

    news_chief_url = "http://localhost:8080"
    reporter_url = "http://localhost:8081"

    # No timeout for test - let the workflow complete naturally
    # The workflow can take varying amounts of time depending on:
    # - Anthropic API response times
    # - Archivist retry logic (up to 122s with retries)
    # - Network conditions
    # - Agent processing time
    async with httpx.AsyncClient(timeout=None) as http_client:

        # ========================================
        # STEP 1: Connect to News Chief
        # ========================================
        print("\nüìã STEP 1: Connecting to News Chief")
        print("-" * 60)

        card_resolver = A2ACardResolver(http_client, news_chief_url)
        news_chief_card = await card_resolver.get_agent_card()

        print(f"‚úÖ Connected to: {news_chief_card.name}")
        print(f"   URL: {news_chief_card.url}")
        print(f"   Skills: {len(news_chief_card.skills)}")

        # Create News Chief client
        client_config = ClientConfig(httpx_client=http_client, streaming=False)
        client_factory = ClientFactory(client_config)
        news_chief_client = client_factory.create(news_chief_card)

        # ========================================
        # STEP 2: Verify Reporter is Online
        # ========================================
        print("\nüìù STEP 2: Verifying Reporter Agent")
        print("-" * 60)

        reporter_resolver = A2ACardResolver(http_client, reporter_url)
        reporter_card = await reporter_resolver.get_agent_card()

        print(f"‚úÖ Reporter online: {reporter_card.name}")
        print(f"   URL: {reporter_card.url}")
        print(f"   Skills: {len(reporter_card.skills)}")

        # ========================================
        # STEP 3: Assign Story via News Chief
        # ========================================
        print("\nüì∞ STEP 3: Assigning Story via News Chief")
        print("-" * 60)

        story = {
            "topic": "AI Agents Transform Modern Newsrooms",
            "angle": "How A2A protocol enables multi-agent collaboration in journalism",
            "target_length": 1200,
            "priority": "high",
            "deadline": "2025-10-08T18:00:00Z"
        }

        print(f"Story Topic: {story['topic']}")
        print(f"Angle: {story['angle']}")
        print(f"Priority: {story['priority']}")
        print(f"Target Length: {story['target_length']} words")

        request = {
            "action": "assign_story",
            "story": story
        }
        message = create_text_message_object(content=json.dumps(request))

        story_id = None
        async for response in news_chief_client.send_message(message):
            if hasattr(response, 'parts'):
                part = response.parts[0]
                text_content = part.root.text if hasattr(part, 'root') and hasattr(part.root, 'text') else None
                if text_content:
                    result = json.loads(text_content)
                    print(f"\n‚úÖ News Chief Response:")
                    print(f"   Status: {result.get('status')}")
                    print(f"   Story ID: {result.get('story_id')}")
                    print(f"   Message: {result.get('message')}")

                    story_id = result.get('story_id')

                    # Check if Reporter received the assignment
                    reporter_response = result.get('reporter_response', {})
                    if reporter_response:
                        print(f"\nüìù Reporter Response (via A2A):")
                        print(f"   Status: {reporter_response.get('status')}")
                        print(f"   Message: {reporter_response.get('message')}")
                        print(f"   Reporter Status: {reporter_response.get('reporter_status')}")
                        print(f"   Estimated Completion: {reporter_response.get('estimated_completion')}")

        if not story_id:
            print("‚ùå Failed to assign story")
            return

        # ========================================
        # STEP 4: Check Reporter's Status
        # ========================================
        print("\nüîç STEP 4: Checking Reporter's Status")
        print("-" * 60)

        # Create Reporter client
        reporter_client = client_factory.create(reporter_card)

        request = {
            "action": "get_status",
            "story_id": story_id
        }
        message = create_text_message_object(content=json.dumps(request))

        async for response in reporter_client.send_message(message):
            if hasattr(response, 'parts'):
                part = response.parts[0]
                text_content = part.root.text if hasattr(part, 'root') and hasattr(part.root, 'text') else None
                if text_content:
                    result = json.loads(text_content)
                    print(f"‚úÖ Reporter has assignment:")
                    assignment = result.get('assignment', {})
                    print(f"   Topic: {assignment.get('topic')}")
                    print(f"   Status: {assignment.get('reporter_status')}")
                    print(f"   Accepted at: {assignment.get('accepted_at')}")

        # ========================================
        # STEP 5: Tell Reporter to Write Article
        # ========================================
        print("\n‚úçÔ∏è  STEP 5: Reporter Writes Article (Multi-Agent Workflow)")
        print("-" * 60)
        print("‚è≥ This involves multiple steps:")
        print("   1. Generate outline and research questions (~8s)")
        print("   2. Call Researcher + Archivist IN PARALLEL (~20s)")
        print("      ‚Üí Researcher: Answers research questions using Anthropic")
        print("      ‚Üí Archivist: Searches Elasticsearch for historical articles")
        print("   3. Generate article with research + archive data (~15s)")
        print("   4. Submit to Editor for review (~17s)")
        print("   5. Apply editorial suggestions (~15s)")
        print("   6. Publish to Elasticsearch (~5s)")
        print("   Total: Variable (no timeout - let it complete naturally)")
        print()
        print("üìä Watch the agent logs to see each step in detail:")
        print("   - Reporter log: Shows outline generation and article writing")
        print("   - Researcher log: Shows bulk research processing")
        print("   - Archivist: Direct HTTP call to Elastic Cloud")
        print("   - Editor log: Shows editorial review")
        print("   - Publisher log: Shows tag generation and indexing")
        print()

        request = {
            "action": "write_article",
            "story_id": story_id
        }
        message = create_text_message_object(content=json.dumps(request))

        import time
        start_time = time.time()
        print(f"‚è±Ô∏è  Started at: {time.strftime('%H:%M:%S')}")
        print()

        async for response in reporter_client.send_message(message):
            if hasattr(response, 'parts'):
                part = response.parts[0]
                text_content = part.root.text if hasattr(part, 'root') and hasattr(part.root, 'text') else None
                if text_content:
                    result = json.loads(text_content)
                    elapsed = time.time() - start_time

                    print(f"\n‚úÖ Article Generation Complete!")
                    print(f"   ‚è±Ô∏è  Total Time: {elapsed:.1f} seconds")
                    print(f"   Status: {result.get('status')}")
                    print(f"   Word Count: {result.get('word_count')}")

                    # Show if published
                    if result.get('published'):
                        print(f"   üì∞ Published: Yes")
                        publisher_resp = result.get('publisher_response', {})
                        if publisher_resp.get('elasticsearch'):
                            es_info = publisher_resp['elasticsearch']
                            print(f"   üìá Elasticsearch:")
                            print(f"      - Index: {es_info.get('index')}")
                            print(f"      - Document ID: {es_info.get('document_id')}")
                        if publisher_resp.get('tags'):
                            print(f"   üè∑Ô∏è  Tags: {', '.join(publisher_resp.get('tags', [])[:5])}")
                        if publisher_resp.get('categories'):
                            print(f"   üìÇ Categories: {', '.join(publisher_resp.get('categories', []))}")

                    print(f"   Preview: {result.get('preview', '')[:150]}...")
                    print()
                    print("=" * 60)
                    print("üìã MULTI-AGENT WORKFLOW SUMMARY")
                    print("=" * 60)
                    print("‚úì Reporter generated outline with research questions")
                    print("‚úì Researcher answered questions in parallel with Archivist")
                    print("‚úì Archivist searched historical articles from Elasticsearch")
                    print("‚úì Reporter wrote article integrating all data")
                    print("‚úì Editor reviewed and provided suggestions")
                    print("‚úì Reporter applied editorial suggestions")
                    print("‚úì Publisher indexed article to Elasticsearch")
                    print("=" * 60)

        # ========================================
        # STEP 6: Reporter Submits Draft to Editor
        # ========================================
        print("\nüì§ STEP 6: Reporter Submits Draft to Editor")
        print("-" * 60)
        print("‚è≥ Submitting to Editor for review (may take 30-40 seconds)...")

        request = {
            "action": "submit_draft",
            "story_id": story_id
        }
        message = create_text_message_object(content=json.dumps(request))

        editor_response = None
        async for response in reporter_client.send_message(message):
            if hasattr(response, 'parts'):
                part = response.parts[0]
                text_content = part.root.text if hasattr(part, 'root') and hasattr(part.root, 'text') else None
                if text_content:
                    result = json.loads(text_content)
                    editor_response = result.get('editor_response', {})
                    print(f"‚úÖ Draft Submitted and Reviewed:")
                    print(f"   Status: {result.get('status')}")
                    print(f"   Word Count: {result.get('word_count')}")

                    if editor_response:
                        review = editor_response.get('review', {})
                        print(f"\n‚úèÔ∏è  Editor Review:")
                        print(f"   Approval: {review.get('approval_status')}")
                        print(f"   Overall: {review.get('overall_assessment', 'N/A')[:80]}...")
                        print(f"   Suggested Edits: {len(review.get('suggested_edits', []))}")

        # ========================================
        # STEP 7: Apply Editorial Suggestions
        # ========================================
        print("\n‚úèÔ∏è  STEP 7: Reporter Applies Editorial Suggestions")
        print("-" * 60)
        print("‚è≥ Integrating editor feedback (may take 20-30 seconds)...")

        request = {
            "action": "apply_edits",
            "story_id": story_id
        }
        message = create_text_message_object(content=json.dumps(request))

        async for response in reporter_client.send_message(message):
            if hasattr(response, 'parts'):
                part = response.parts[0]
                text_content = part.root.text if hasattr(part, 'root') and hasattr(part.root, 'text') else None
                if text_content:
                    result = json.loads(text_content)
                    print(f"‚úÖ Edits Applied:")
                    print(f"   Status: {result.get('status')}")
                    print(f"   Old Word Count: {result.get('old_word_count')}")
                    print(f"   New Word Count: {result.get('new_word_count')}")
                    print(f"   Revisions Applied: {result.get('revisions_applied')}")
                    print(f"   Preview: {result.get('preview', '')[:100]}...")

        # ========================================
        # STEP 8: Publish Final Article
        # ========================================
        print("\nüì∞ STEP 8: Publishing Final Article")
        print("-" * 60)

        request = {
            "action": "publish_article",
            "story_id": story_id
        }
        message = create_text_message_object(content=json.dumps(request))

        published_filepath = None
        async for response in reporter_client.send_message(message):
            if hasattr(response, 'parts'):
                part = response.parts[0]
                text_content = part.root.text if hasattr(part, 'root') and hasattr(part.root, 'text') else None
                if text_content:
                    result = json.loads(text_content)
                    published_filepath = result.get('filepath')
                    print(f"‚úÖ Article Published:")
                    print(f"   Status: {result.get('status')}")
                    print(f"   File: {published_filepath}")
                    print(f"   Word Count: {result.get('word_count')}")
                    print(f"   Published at: {result.get('published_at')}")

        # ========================================
        # STEP 9: Final Status Check
        # ========================================
        print("\nüìä STEP 9: Final Status Check")
        print("-" * 60)

        # Check News Chief status
        request = {
            "action": "get_story_status",
            "story_id": story_id
        }
        message = create_text_message_object(content=json.dumps(request))

        async for response in news_chief_client.send_message(message):
            if hasattr(response, 'parts'):
                part = response.parts[0]
                text_content = part.root.text if hasattr(part, 'root') and hasattr(part.root, 'text') else None
                if text_content:
                    result = json.loads(text_content)
                    story = result.get('story', {})
                    print(f"‚úÖ News Chief Status:")
                    print(f"   Story ID: {story.get('story_id')}")
                    print(f"   Topic: {story.get('topic')}")
                    print(f"   Status: {story.get('status')}")
                    print(f"   Created: {story.get('created_at')}")

        # Check Reporter status
        request = {
            "action": "get_status",
            "story_id": story_id
        }
        message = create_text_message_object(content=json.dumps(request))

        async for response in reporter_client.send_message(message):
            if hasattr(response, 'parts'):
                part = response.parts[0]
                text_content = part.root.text if hasattr(part, 'root') and hasattr(part.root, 'text') else None
                if text_content:
                    result = json.loads(text_content)
                    draft = result.get('draft', {})
                    print(f"\n‚úÖ Reporter Status:")
                    print(f"   Draft Status: {draft.get('status')}")
                    print(f"   Word Count: {draft.get('word_count')}")
                    print(f"   Submitted to: {draft.get('submitted_to')}")

        # ========================================
        # SUMMARY
        # ========================================
        print("\n" + "="*60)
        print("üéâ FULL EDITORIAL WORKFLOW COMPLETED SUCCESSFULLY")
        print("="*60)
        print("\n‚úÖ Complete Multi-Agent Workflow:")
        print()
        print("   üìã STEP 1: Assignment Phase")
        print("   ‚îú‚îÄ Client ‚Üí News Chief: Story assignment request")
        print("   ‚îî‚îÄ News Chief ‚Üí Reporter: A2A message with story details")
        print()
        print("   ‚úçÔ∏è  STEP 2: Research & Writing Phase (PARALLEL EXECUTION)")
        print("   ‚îú‚îÄ Reporter ‚Üí Anthropic: Generate outline + research questions (~8s)")
        print("   ‚îú‚îÄ Reporter ‚Üí Researcher: A2A request with questions")
        print("   ‚îÇ  ‚îî‚îÄ Researcher ‚Üí Anthropic: Bulk research call (~15s)")
        print("   ‚îú‚îÄ Reporter ‚Üí Archivist: HTTP POST to Elastic Agent Builder API")
        print("   ‚îÇ  ‚îî‚îÄ Archivist ‚Üí Elasticsearch: Search news_archive index (~20s)")
        print("   ‚îÇ     ‚Ä¢ Returns: Historical article highlights and references")
        print("   ‚îÇ     ‚Ä¢ Status: REQUIRED (workflow fails if unavailable)")
        print("   ‚îî‚îÄ Reporter ‚Üí Anthropic: Generate article with all data (~15s)")
        print()
        print("   ‚úèÔ∏è  STEP 3: Editorial Review Phase")
        print("   ‚îú‚îÄ Reporter ‚Üí Editor: A2A request with draft")
        print("   ‚îÇ  ‚îî‚îÄ Editor ‚Üí Anthropic: Review for grammar/tone/length (~17s)")
        print("   ‚îî‚îÄ Editor ‚Üí Reporter: A2A response with suggestions")
        print()
        print("   üì∞ STEP 4: Revision & Publishing Phase")
        print("   ‚îú‚îÄ Reporter ‚Üí Anthropic: Apply editorial suggestions (~15s)")
        print("   ‚îú‚îÄ Reporter ‚Üí Publisher: A2A request with final article")
        print("   ‚îÇ  ‚îú‚îÄ Publisher ‚Üí Anthropic: Generate tags/categories (~8s)")
        print("   ‚îÇ  ‚îú‚îÄ Publisher ‚Üí Elasticsearch: Index to news_archive (~2s)")
        print("   ‚îÇ  ‚îú‚îÄ Publisher ‚Üí CI/CD: Trigger deployment (mock)")
        print("   ‚îÇ  ‚îî‚îÄ Publisher ‚Üí CRM: Send notifications (mock)")
        print("   ‚îî‚îÄ Publisher ‚Üí Reporter: A2A response with confirmation")
        print()
        print("=" * 60)
        print("üìä MULTI-AGENT STATISTICS")
        print("=" * 60)
        print("   ü§ñ Total Agents: 6")
        print("      ‚Ä¢ News Chief (Coordinator)")
        print("      ‚Ä¢ Reporter (Writer)")
        print("      ‚Ä¢ Researcher (Fact-checker)")
        print("      ‚Ä¢ Archivist (Search - Elastic Cloud) ‚ö†Ô∏è  REQUIRED")
        print("      ‚Ä¢ Editor (Reviewer)")
        print("      ‚Ä¢ Publisher (Indexer)")
        print()
        print("   üîÑ Communication Protocol: A2A (Agent2Agent)")
        print("      ‚Ä¢ Internal agents: A2A JSONRPC 2.0")
        print("      ‚Ä¢ Archivist: Elastic Agent Builder Converse API")
        print()
        print("   ‚ö° Parallel Execution:")
        print("      ‚Ä¢ Researcher + Archivist run simultaneously")
        print("      ‚Ä¢ Saves ~20 seconds vs sequential execution")
        print()
        print("   ü§ñ AI Model Usage:")
        print("      ‚Ä¢ Claude Sonnet 4: All Anthropic API calls")
        print("      ‚Ä¢ Total API calls: ~6 (outline, research, article, review, edits, tags)")
        print()
        print("   üìá Elasticsearch Integration:")
        print("      ‚Ä¢ Archivist: Searches news_archive for context")
        print("      ‚Ä¢ Publisher: Indexes final articles to news_archive")
        print()
        print("   üìù Detailed Logs Available:")
        print("      ‚Ä¢ Check individual agent logs for full message flow")
        print("      ‚Ä¢ Reporter log shows Researcher + Archivist timing")
        if published_filepath:
            print(f"      ‚Ä¢ Published article: {published_filepath}")
        print("="*60)


if __name__ == "__main__":
    print("\nüß™ Elastic News - End-to-End Workflow Test")
    print("\n‚ö†Ô∏è  Prerequisites:")
    print("   1. News Chief running on http://localhost:8080")
    print("      ‚Üí python run_news_chief.py --reload")
    print("   2. Reporter running on http://localhost:8081")
    print("      ‚Üí python run_reporter.py --reload")
    print("   3. Editor running on http://localhost:8082")
    print("      ‚Üí python run_editor.py --reload")
    print("   4. Researcher running on http://localhost:8083")
    print("      ‚Üí python run_researcher.py --reload")
    print("   5. Publisher running on http://localhost:8084")
    print("      ‚Üí python run_publisher.py --reload")
    print("   6. Elasticsearch index created")
    print("      ‚Üí python scripts/create_elasticsearch_index.py")
    print("   7. Environment variables set:")
    print("      ‚Üí ANTHROPIC_API_KEY (required)")
    print("      ‚Üí ELASTICSEARCH_ENDPOINT (required)")
    print("      ‚Üí ELASTIC_SEARCH_API_KEY (required)")
    print("      ‚Üí ELASTIC_ARCHIVIST_INDEX (required)")
    print("      ‚Üí ELASTIC_ARCHIVIST_AGENT_CARD_URL (optional - for historical search)")
    print("      ‚Üí ELASTIC_ARCHIVIST_API_KEY (optional - for historical search)")
    print("\nStarting test in 2 seconds...")

    import time
    time.sleep(2)

    try:
        asyncio.run(test_newsroom_workflow())
    except Exception as e:
        print(f"\n‚ùå Test failed: {e}")
        import traceback
        traceback.print_exc()
